---
#local_action: command /usr/bin/take_out_of_pool {{ inventory_hostname }}
- name: Update docker  
  yum: pkg=docker state=latest
- name: Start docker
  service: name=docker state=started enabled=yes
- name: Install helper
  copy: src=docker-enter dest=/usr/sbin/ mode=0755
- name: Download image
  shell: docker pull {{ base_image }}
- name: Cleanup kill
  shell: docker kill $(docker ps -a | grep {{ prefix }} | awk '{print $1}') || echo "Nothing to kill"
- name: Cleanup remove
  shell: docker rm $(docker ps -a | grep {{ prefix }} | awk '{print $1}') || echo "Nothing to remove"
- name: Cleanup docker skeleton
  file: path={{ prefix }} state=absent
- name: Create docker skeleton
  file: path={{ prefix }}/{{ item }} state=directory recurse=yes
  with_items:
  - rpms
  - repos
  - bin_files
  - launch_scripts
- name: Create IP helper
  template: src=ip_start.j2 dest={{ prefix }}/bin_files/ip_start mode=0755
- name: Copy helper scripts
  copy: src={{ item }} dest={{ prefix }}/bin_files/{{ item }} mode=0755
  with_items:
  - pcmk_stop
  - pcmk_start
  - pcmk_remote_stop
  - pcmk_remote_start
  - fence_docker_cts
- name: Copy launch script
  copy: src=launch.sh dest={{ prefix }}/launch_scripts/launch.sh mode=0755
- name: Copy authorized keys
  shell: cp /root/.ssh/authorized_keys {{ prefix }}
- name: Create docker file
  template: src=Dockerfile.j2 dest={{ prefix }}/Dockerfile
- name: Making image
  shell: docker build -t {{ prefix }} {{ prefix }}
- name: Launch images
  shell: docker run -d -i -t -P -h {{ prefix }}-{{ item }} --name={{ prefix }}-{{ item }} -p 2200{{ item }}:22 $(docker images | grep {{ prefix }}.*latest | awk '{print $3}') /bin/bash
  with_sequence: count={{ max }}
- name: Calculate IPs
  shell: for n in $(seq {{ max }} ); do echo {{ subnet }}.${n}; done | tr '\n' ' '
  register: node_ips
- name: Start the IP
  shell: docker-enter {{ prefix }}-{{ item }} ip_start
  with_sequence: count={{ max }}
- name: Configure cluster
  shell: docker-enter {{ prefix }}-{{ item }} pcs cluster setup --local --name {{ prefix }} {{ node_ips.stdout }}
  with_sequence: count={{ max }}
- name: Start the cluster
  shell: docker-enter {{ prefix }}-{{ item }} pcmk_start
  with_sequence: count={{ max }}
- name: Set cluster options
  shell: docker-enter {{ prefix }}-1 pcs property set stonith-enabled=false
- name: Configure VIP
  shell: docker-enter {{ prefix }}-1 pcs resource create ClusterIP ocf:heartbeat:IPaddr2 ip={{ subnet }}.100 cidr_netmask=32 op monitor interval=30s
- name: Configure 
  shell: docker-enter {{ prefix }}-1 pcs resource defaults resource-stickiness=100
- name: Configure 
  shell: docker-enter {{ prefix }}-1 pcs resource create WebSite apache configfile=/etc/httpd/conf/httpd.conf statusurl="http://localhost/server-status" op monitor interval=1min
- name: Configure 
  shell: docker-enter {{ prefix }}-1 pcs constraint colocation add WebSite with ClusterIP INFINITY
- name: Configure 
  shell: docker-enter {{ prefix }}-1 pcs constraint order ClusterIP then WebSite
- name: Configure 
  shell: docker-enter {{ prefix }}-1 pcs constraint location WebSite prefers {{ prefix }}-1=50
# TODO: Enable fencing
# TODO: Make this a full LAMP stack similar to https://github.com/ansible/ansible-examples/tree/master/lamp_simple
# TODO: Create a Pacemaker module?

#  run_once: true
#  delegate_to: web01.example.org

