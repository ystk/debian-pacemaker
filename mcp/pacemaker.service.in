[Unit]
Description=Pacemaker High Availability Cluster Manager

After=dbus.service
After=basic.target
After=syslog.service
After=network.target
After=corosync.service

Requires=dbus.service
Requires=basic.target
Requires=corosync.service
# if you use crm_mon, uncomment the line below.
# Wants=crm_mon.service

[Install]
WantedBy=multi-user.target

[Service]
Type=simple
KillMode=process
NotifyAccess=main
EnvironmentFile=-@sysconfdir@/sysconfig/pacemaker
EnvironmentFile=-@sysconfdir@/sysconfig/sbd
SuccessExitStatus=100

ExecStart=@sbindir@/pacemakerd -f

# If pacemakerd doesn't stop, its probably waiting on a cluster
# resource.  Sending -KILL will just get the node fenced
SendSIGKILL=no

# If we ever hit the StartLimitInterval/StartLimitBurst limit and the
# admin wants to stop the cluster while pacemakerd is not running, it
# might be a good idea to enable the ExecStopPost directive below.
#
# Although the node will likely end up being fenced as a result so its
# not on by default
#
# ExecStopPost=/usr/bin/killall -TERM crmd attrd fenced cib pengine lrmd

# If you want Corosync to stop whenever Pacemaker is stopped,
# uncomment the next line too:
#
# ExecStopPost=/bin/sh -c 'pidof crmd || killall -TERM corosync'

# Uncomment this for older versions of systemd that didn't support
# TimeoutStopSec
# TimeoutSec=30min

# Pacemaker can only exit after all managed services have shut down
# A HA database could conceivably take even longer than this 
TimeoutStopSec=30min
TimeoutStartSec=60s

# Restart options include: no, on-success, on-failure, on-abort or always
Restart=on-failure

# crm_perror() writes directly to stderr, so ignore it here
# to avoid double-logging with the wrong format
StandardError=null

# if you use crm_mon, uncomment the line below.
# ExecStopPost=/bin/sh -c 'systemctl status crm_mon >/dev/null && systemctl stop crm_mon'
